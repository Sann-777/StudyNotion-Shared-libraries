#!/usr/bin/env groovy

def call(Map config = [:]) {
    script {
        echo "üîí Starting Secret Leak Scanning with Gitleaks..."

        // 1. Install gitleaks if not already installed
        if (sh(script: "command -v gitleaks >/dev/null 2>&1", returnStatus: true) != 0) {
            echo "üì¶ Installing Gitleaks..."
            sh '''
                # Install build dependencies
                sudo apt-get update -y
                sudo apt-get install -y golang-go make git

                # Clone & build
                git clone https://github.com/gitleaks/gitleaks.git
                cd gitleaks
                make build

                # Move binary to PATH
                sudo mv gitleaks /usr/local/bin/gitleaks
                gitleaks version
            '''
            echo "üì¶ Gitleaks installed"
        } else {
            echo "‚ö° Gitleaks already installed"
        }

        // 2. Run gitleaks scan
        def reportFile = "gitleaks-report.json"
        def exitCode = sh(
            script: "gitleaks detect --source . --report-format json --report-path ${reportFile}",
            returnStatus: true
        )

        // 3. Archive report for Jenkins
        archiveArtifacts artifacts: reportFile, allowEmptyArchive: true

        if (fileExists(reportFile)) {
            echo "üìä Secret scan completed. Report saved: ${reportFile}"
        } else {
            echo "‚ö†Ô∏è  No report generated by Gitleaks"
        }

        // 4. Handle results
        if (exitCode != 0) {
            if (config.allowFailure) {
                echo "‚ùó Secrets found, but continuing pipeline (allowFailure = true)."
            } else {
                error "‚ùå Secret leaks detected! Check ${reportFile} for details."
            }
        } else {
            echo "‚úÖ No secrets detected."
        }
    }
}
